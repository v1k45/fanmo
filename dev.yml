version: '3.9'

volumes:
  local_postgres_data: {}
  local_postgres_data_backups: {}

services:
  django: &django
    image: v1k45/fanmo:2022.07.1004-dev
    volumes:
      - ./backend/memberships/media:/app/memberships/media
    depends_on:
      - postgres
      - redis
    networks:
      - backend
      - proxy
    env_file:
      - ./.envs/.dev/.django
      - ./.envs/.dev/.nuxt
      - ./.envs/.dev/.postgres
    command: /start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      start_period: 15s
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  qcluster:
    <<: *django
    command: /qcluster
    healthcheck:
      disable: true

  nuxt:
    <<: *django
    command: /nuxt
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      start_period: 15s

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: memberships_production_postgres
    container_name: memberships_postgres
    volumes:
      - local_postgres_data:/var/lib/postgresql/data:Z
      - local_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.dev/.postgres
    networks:
      - backend

  mailhog:
    image: mailhog/mailhog:v1.0.0
    container_name: memberships_mailhog
    ports:
      - "8025:8025"
    networks:
      - backend

  redis:
    image: redis:6
    container_name: memberships_redis
    networks:
      - backend

  caddy:
    image: "caddy:2.1.1"
    restart: unless-stopped
    depends_on:
      - django
    env_file: ./.envs/.dev/.caddy
    container_name: memberships_caddy
    volumes:
      - ./Caddyfile.local:/etc/caddy/Caddyfile
      - ./caddy/data:/data
      - ./caddy/config:/config
    ports:
      - "7070:80"
      - "7777:443"
    networks:
      - proxy

networks:
  backend:
    driver: bridge
  proxy:
    driver: bridge
