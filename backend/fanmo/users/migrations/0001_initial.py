# Generated by Django 3.2.8 on 2022-07-21 00:02

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djmoney.models.fields
import fanmo.users.validators
import simple_history.models
import versatileimagefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("subscriptions", "0001_initial"),
        ("posts", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("donations", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits, dashes and underscores only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            fanmo.users.validators.ASCIIUsernameValidator(),
                            fanmo.users.validators.validate_username,
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Name of User"
                    ),
                ),
                ("one_liner", models.CharField(blank=True, max_length=80)),
                (
                    "avatar",
                    versatileimagefield.fields.VersatileImageField(
                        blank=True, upload_to="profiles/avatars/"
                    ),
                ),
                (
                    "cover",
                    versatileimagefield.fields.VersatileImageField(
                        blank=True, upload_to="profiles/covers/"
                    ),
                ),
                ("about", models.TextField(blank=True)),
                ("email_verified", models.BooleanField(default=False)),
                ("is_creator", models.BooleanField(null=True)),
                ("subscriber_count", models.PositiveSmallIntegerField(default=0)),
                ("follower_count", models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                "db_table": "users",
                "ordering": ("-created_at",),
                "default_related_name": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserPreference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_accepting_payments", models.BooleanField(default=True)),
                ("donation_description", models.TextField(blank=True)),
                (
                    "thank_you_message",
                    models.TextField(default="Thank you for the support! ðŸŽ‰"),
                ),
                (
                    "minimum_amount_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("INR", "Indian Rupee")],
                        default="INR",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "minimum_amount",
                    djmoney.models.fields.MoneyField(
                        decimal_places=2, default=Decimal("10.0"), max_digits=7
                    ),
                ),
                (
                    "platform_fee_percent",
                    models.DecimalField(decimal_places=2, default=4.9, max_digits=3),
                ),
                ("notify_following_posts", models.BooleanField(default=True)),
                ("notify_comment_replies", models.BooleanField(default=True)),
                ("notify_post_comments", models.BooleanField(default=True)),
                ("notify_donations", models.BooleanField(default=True)),
                ("notify_memberships", models.BooleanField(default=True)),
                ("notify_marketing", models.BooleanField(default=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_preferences",
                "ordering": ("-created_at",),
                "default_related_name": "user_preferences",
            },
        ),
        migrations.CreateModel(
            name="UserOnboarding",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("full_name", models.CharField(blank=True, max_length=255)),
                ("introduction", models.TextField(blank=True)),
                ("mobile", models.CharField(blank=True, max_length=10)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("in_progress", "In Progress"),
                            ("submitted", "Submitted"),
                            ("on_hold", "On Hold"),
                            ("completed", "Completed"),
                        ],
                        default="in_progress",
                        max_length=30,
                    ),
                ),
                ("is_bank_account_added", models.BooleanField(default=False)),
                ("is_creator_approved", models.BooleanField(default=False)),
                ("notes", models.TextField(blank=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_onboarding",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_onboardings",
                "ordering": ("-created_at",),
                "default_related_name": "user_onboardings",
            },
        ),
        migrations.CreateModel(
            name="SocialLink",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("website_url", models.URLField(blank=True)),
                ("youtube_url", models.URLField(blank=True)),
                ("facebook_url", models.URLField(blank=True)),
                ("instagram_url", models.URLField(blank=True)),
                ("twitter_url", models.URLField(blank=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="social_links",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalUserPreference",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "ip_address",
                    models.GenericIPAddressField(null=True, verbose_name="IP address"),
                ),
                ("is_accepting_payments", models.BooleanField(default=True)),
                ("donation_description", models.TextField(blank=True)),
                (
                    "thank_you_message",
                    models.TextField(default="Thank you for the support! ðŸŽ‰"),
                ),
                (
                    "minimum_amount_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[("INR", "Indian Rupee")],
                        default="INR",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "minimum_amount",
                    djmoney.models.fields.MoneyField(
                        decimal_places=2, default=Decimal("10.0"), max_digits=7
                    ),
                ),
                (
                    "platform_fee_percent",
                    models.DecimalField(decimal_places=2, default=4.9, max_digits=3),
                ),
                ("notify_following_posts", models.BooleanField(default=True)),
                ("notify_comment_replies", models.BooleanField(default=True)),
                ("notify_post_comments", models.BooleanField(default=True)),
                ("notify_donations", models.BooleanField(default=True)),
                ("notify_memberships", models.BooleanField(default=True)),
                ("notify_marketing", models.BooleanField(default=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical user preference",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Following",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "from_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="from_followings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "to_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="to_followings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "followings",
                "ordering": ("-created_at",),
                "default_related_name": "followings",
            },
        ),
        migrations.CreateModel(
            name="CreatorActivity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("new_membership", "New Membership"),
                            ("membership_update", "Membership Update"),
                            ("membership_stop", "Membership Stop"),
                            ("donation", "Donation"),
                            ("comment", "Comment"),
                            ("comment_reply", "Comment Reply"),
                            ("follower", "Follower"),
                        ],
                        max_length=32,
                    ),
                ),
                ("message", models.TextField()),
                (
                    "data",
                    models.JSONField(
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                (
                    "comment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="creator_activities",
                        to="posts.comment",
                    ),
                ),
                (
                    "creator_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "donation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="creator_activities",
                        to="donations.donation",
                    ),
                ),
                (
                    "fan_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fan_activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "membership",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="creator_activities",
                        to="subscriptions.membership",
                    ),
                ),
            ],
            options={
                "db_table": "creator_activities",
                "ordering": ("-created_at",),
                "default_related_name": "creator_activities",
            },
        ),
        migrations.AddField(
            model_name="user",
            name="followers",
            field=models.ManyToManyField(
                related_name="followings",
                through="users.Following",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddConstraint(
            model_name="following",
            constraint=models.UniqueConstraint(
                fields=("from_user", "to_user"), name="following"
            ),
        ),
    ]
